/**
 * Gatsby's Node API Interface to Jira Data Source
 * Matt Sommer
 */

const HttpService = require('./http-service');

const axios = require('axios');
const crypto = require('crypto');

exports.sourceNodes = async ({ boundActionCreators }, configOptions) => {

  const { createNode } = boundActionCreators;

  // Delete empty 'plugins' array config option generated by GatsbyJS
  delete configOptions.plugins;

  // Log the host configuration
  console.log("Plugin Jira Source: Config Settings:", configOptions.host);

  console.log(configOptions.epic_field_id);
    
  const httpService = new HttpService(configOptions.host);

  const fetchTasks = () => httpService.jiraQuery('', 0)
    .then((response) => {
      return axios.all(httpService.queryArray(configOptions.host, response.data.total))
        .then((results) => results.map(r => r.data.issues))
        .then((issues) => {
          issues.push(response.data.issues);
          return [].concat.apply([], issues);
        });
    });

    // Fetch all the Jira Issues
  const res = await fetchTasks();

  console.log("Jira Issues returned: " + res.length);

  // When results retrieved create Nodes for each entity
  console.log("Plugin Jira Source: Creating source nodes");
  res.map((inputTask) => {

    //GraphQL node names apparently cannot start with a number so some fields have to be renamed...
    // https://github.com/graphql/graphql-js/blob/master/src/utilities/assertValidName.js#L14
    let str = JSON.stringify(inputTask);
    str = str.replace(/16x16/g, "size16x16");
    str = str.replace(/24x24/g, "size24x24");
    str = str.replace(/32x32/g, "size32x32");
    str = str.replace(/48x48/g, "size48x48");
    // Gatsby already uses the fields attribute
    // I'm not sur what it's used for buy maybe it can be integrated with?
    str = str.replace(/fields/g, "jiraFields");
    const task = JSON.parse(str);

    // Create your node object
    const taskNode = {
      // Required fields
      parent: '__SOURCE__',
      internal: {
        type: 'JiraIssue', // name of the graphQL query --> allTask {}
      },
      children: [],
      id: task.id,
      key: task.key,
      type: task.jiraFields.issuetype.name,
      summary: task.jiraFields.summary,
      status: task.jiraFields.status.name,
      labels: task.jiraFields.labels,
      components: task.jiraFields.components,
      project: task.jiraFields.project.name,
      epic: task.jiraFields[configOptions.epic_field_id],
      jiraIssue: task,
      slug: HttpService.sanitizeURLPath(task.jiraFields.project.name) + "/" + HttpService.sanitizeURLPath(task.jiraFields.summary),
    };

    // Get content digest of node. (Required field)
    taskNode.internal.contentDigest = crypto
      .createHash('md5')
      .update(JSON.stringify(taskNode))
      .digest('hex');

    // Create a Node using Gatsby's API
    createNode(taskNode);
  });
};
